priority -50

# JavaScript versions -- from the TextMate bundle + some additions
# for jasmine-jquery matchers
#

snippet des "Describe (js)" b
describe('${1:description}', () => {
	$0
})
endsnippet

snippet it "it (js)" b
it('${1:description}', () => {
	$0
})
endsnippet

snippet bef "before each (js)" b
beforeEach(() => {
	$0
})
endsnippet

snippet aft "after each (js)" b
afterEach(() => {
	$0
})
endsnippet

snippet befa "before all (js)" b
beforeAll(() => {
	$0
})
endsnippet

snippet afta "after all (js)" b
afterAll(() => {
	$0
})
endsnippet

snippet ru "runs (js)" b
runs(() => {
	$0
})
endsnippet

snippet ex "expect (js)" b
expect(${1:target})$0
endsnippet

snippet ee "expect to equal (js)" b
expect(${1:target}).toEqual(${2:value})
endsnippet

snippet eb "expect to be (js)" b
expect(${1:target}).toBe(${2:value})
endsnippet

snippet em "expect to match (js)" b
expect(${1:target}).toMatch(${2:pattern})
endsnippet

snippet eha "expect to have attribute (js)" b
expect(${1:target}).toHaveAttr('${2:attr}'${3:, '${4:value}'})
endsnippet

snippet et "expect to be truthy (js)" b
expect(${1:target}).toBeTruthy()
endsnippet

snippet ef "expect to be falsy (js)" b
expect(${1:target}).toBeFalsy()
endsnippet

snippet ed "expect to be defined (js)" b
expect(${1:target}).toBeDefined()
endsnippet

snippet eud "expect to be defined (js)" b
expect(${1:target}).toBeUndefined()
endsnippet

snippet en "expect to be null (js)" b
expect(${1:target}).toBeNull()
endsnippet

snippet ec "expect to contain (js)" b
expect(${1:target}).toContain(${2:value})
endsnippet

snippet notx "expect not (js)" b
expect(${1:target}).not$0
endsnippet

snippet note "expect not to equal (js)" b
expect(${1:target}).not.toEqual(${2:value})
endsnippet

snippet notl "expect to not be less than (js)" b
expect(${1:target}).not.toBeLessThan(${2:value})
endsnippet

snippet notg "expect to not be greater than (js)" b
expect(${1:target})..not.toBeGreaterThan(${2:value})
endsnippet

snippet notm "expect not to match (js)" b
expect(${1:target}).not.toMatch(${2:pattern})
endsnippet

snippet notha "expect to not have attribute (js)" b
expect(${1:target}).not.toHaveAttr('${2:attr}'${3:, '${4:value}'})
endsnippet

snippet nott "expect not to be truthy (js)" b
expect(${1:target}).not.toBeTruthy()
endsnippet

snippet notf "expect not to be falsy (js)" b
expect(${1:target}).not.toBeFalsy()
endsnippet

snippet notd "expect not to be defined (js)" b
expect(${1:target}).not.toBeDefined()
endsnippet

snippet notn "expect not to be null (js)" b
expect(${1:target}).not.toBeNull()
endsnippet

snippet notc "expect not to contain (js)" b
expect(${1:target}).not.toContain(${2:value})
endsnippet
